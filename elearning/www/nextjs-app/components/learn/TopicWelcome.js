import { useState, useEffect } from 'react';
import { 
  BookOpen, 
  Target, 
  Lightbulb, 
  Clock, 
  TrendingUp, 
  Users, 
  Award, 
  ChevronRight,
  Play,
  CheckCircle,
  Brain,
  Zap,
  BarChart3,
  Sparkles,
  Percent
} from 'lucide-react';
import { useFrappeApi } from '@/hooks/useFrappeApi';

const TopicWelcome = ({ topic, flashcards, onStartLearning, onClose }) => {
  const [currentTip, setCurrentTip] = useState(0);
  const [userProgress, setUserProgress] = useState(null);
  const [loadingProgress, setLoadingProgress] = useState(true);
  const { callApi } = useFrappeApi();
  
  // Load user's progress for this topic
  useEffect(() => {
    const loadUserProgress = async () => {
      if (!topic?.id) return;
      
      try {
        // Get SRS progress
        const srsResponse = await callApi('/api/method/elearning.elearning.doctype.user_srs_progress.user_srs_progress.get_due_srs_summary', {
          method: 'GET'
        });
        
        // Get exam attempts
        const examResponse = await callApi('/api/method/elearning.elearning.doctype.user_exam_attempt.user_exam_attempt.get_exam_attempts_by_topic', {
          method: 'POST',
          data: { topic_id: topic.id }
        });
        
        if (srsResponse?.message) {
          const topicSrs = srsResponse.message.topics.find(t => t.topic_id === topic.id);
          const examAttempts = examResponse?.message || [];
          
          setUserProgress({
            srs: topicSrs || { total_cards: 0, due_cards: 0, new_cards: 0, learning_cards: 0, review_cards: 0 },
            examAttempts: examAttempts.length || 0,
            lastExamDate: examAttempts.length > 0 ? examAttempts[0].creation : null
          });
        }
      } catch (error) {
        console.error('Error loading user progress:', error);
      } finally {
        setLoadingProgress(false);
      }
    };

    loadUserProgress();
  }, [topic?.id, callApi]);
  
  // Study tips for better learning
  const studyTips = [
    {
      icon: <Clock className="w-5 h-5" />,
      title: "H·ªçc ƒë·ªÅu ƒë·∫∑n m·ªói ng√†y",
      description: "D√†nh 15-30 ph√∫t m·ªói ng√†y ƒë·ªÉ √¥n t·∫≠p s·∫Ω hi·ªáu qu·∫£ h∆°n h·ªçc d·ªìn 3-4 ti·∫øng/tu·∫ßn."
    },
    {
      icon: <Brain className="w-5 h-5" />,
      title: "S·ª≠ d·ª•ng k·ªπ thu·∫≠t Active Recall",
      description: "Th·ª≠ nh·ªõ l·∫°i ki·∫øn th·ª©c tr∆∞·ªõc khi xem ƒë√°p √°n ƒë·ªÉ tƒÉng c∆∞·ªùng kh·∫£ nƒÉng ghi nh·ªõ."
    },
    {
      icon: <TrendingUp className="w-5 h-5" />,
      title: "T·ª´ d·ªÖ ƒë·∫øn kh√≥",
      description: "B·∫Øt ƒë·∫ßu v·ªõi Exam Mode ƒë·ªÉ l√†m quen, sau ƒë√≥ chuy·ªÉn sang SRS ƒë·ªÉ √¥n t·∫≠p l√¢u d√†i."
    },
    {
      icon: <Sparkles className="w-5 h-5" />,
      title: "ƒê√°nh gi√° th√†nh th·∫≠t",
      description: "H√£y ƒë√°nh gi√° m·ª©c ƒë·ªô hi·ªÉu m·ªôt c√°ch ch√¢n th·ª±c ƒë·ªÉ h·ªá th·ªëng ƒë∆∞a ra l·ªãch √¥n t·∫≠p ph√π h·ª£p."
    }
  ];

  // Learning modes with all three modes
  const learningModes = [
    {
      id: 'basic',
      title: 'Basic Mode',
      description: 'Ch·∫ø ƒë·ªô c∆° b·∫£n ƒë·ªÉ xem v√† √¥n t·∫≠p flashcards',
      features: [
        'Xem c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi',
        'L·∫≠t th·∫ª ƒë·ªÉ xem ƒë√°p √°n',
        'ƒêi·ªÅu h∆∞·ªõng qua t·ª´ng th·∫ª',
        'Ph√π h·ª£p cho vi·ªác l√†m quen v·ªõi n·ªôi dung'
      ],
      icon: 'üìö',
      bgColor: 'from-blue-50 to-cyan-50',
      borderColor: 'border-blue-200',
      textColor: 'text-blue-700',
      buttonColor: 'bg-blue-600 hover:bg-blue-700'
    },
    {
      id: 'exam',
      title: 'Exam Mode', 
      description: 'Ch·∫ø ƒë·ªô ki·ªÉm tra ƒë·ªÉ luy·ªán t·∫≠p v√† nh·∫≠n ph·∫£n h·ªìi',
      features: [
        'Tr·∫£ l·ªùi c√¢u h·ªèi v√† nh·∫≠n feedback t·ª´ AI',
        'T·ª± ƒë√°nh gi√° m·ª©c ƒë·ªô hi·ªÉu b√†i',
        'L·ªùi gi·∫£i chi ti·∫øt cho t·ª´ng c√¢u',
        'T·ª± ƒë·ªông th√™m th·∫ª kh√≥ v√†o SRS'
      ],
      icon: 'üìù',
      bgColor: 'from-emerald-50 to-green-50',
      borderColor: 'border-emerald-200', 
      textColor: 'text-emerald-700',
      buttonColor: 'bg-emerald-600 hover:bg-emerald-700'
    },
    {
      id: 'srs',
      title: 'SRS Mode',
      description: 'H·ªá th·ªëng √¥n t·∫≠p ng·∫Øt qu√£ng th√¥ng minh',
      features: [
        '√în t·∫≠p theo thu·∫≠t to√°n spaced repetition',
        'ƒêi·ªÅu ch·ªânh t·∫ßn su·∫•t d·ª±a tr√™n ƒë·ªô kh√≥',
        'T·ªëi ∆∞u h√≥a kh·∫£ nƒÉng ghi nh·ªõ l√¢u d√†i',
        'Nh·∫Øc nh·ªü √¥n t·∫≠p ƒë√∫ng th·ªùi ƒëi·ªÉm'
      ],
      icon: 'üß†',
      bgColor: 'from-purple-50 to-indigo-50',
      borderColor: 'border-purple-200',
      textColor: 'text-purple-700', 
      buttonColor: 'bg-purple-600 hover:bg-purple-700'
    }
  ];

  // Auto-rotate tips
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTip((prev) => (prev + 1) % studyTips.length);
    }, 4000);
    return () => clearInterval(interval);
  }, [studyTips.length]);

  // Calculate topic stats
  const totalFlashcards = flashcards?.length || 0;
  const conceptCards = flashcards?.filter(f => f.flashcard_type === "Concept/Theorem/Formula")?.length || 0;
  const practiceCards = totalFlashcards - conceptCards;

  // Calculate learning progress percentage
  const calculateProgress = () => {
    if (!userProgress || !userProgress.srs) return 0;
    const { total_cards, due_cards } = userProgress.srs;
    if (total_cards === 0) return 0;
    return Math.round(((total_cards - due_cards) / total_cards) * 100);
  };

  const progressPercentage = calculateProgress();
  const hasProgress = userProgress && (userProgress.srs.total_cards > 0 || userProgress.examAttempts > 0);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-emerald-50 p-4 overflow-y-auto">
      <div className="max-w-6xl mx-auto">
        {/* Header Section */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center px-4 py-2 bg-white rounded-full shadow-md mb-4">
            <Sparkles className="w-5 h-5 text-yellow-500 mr-2" />
            <span className="text-sm font-medium text-gray-600">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi</span>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold text-gray-800 mb-4 leading-tight">
            {topic?.topic_name}
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
            Kh√°m ph√° ki·∫øn th·ª©c m·ªõi, luy·ªán t·∫≠p v√† √¥n t·∫≠p m·ªôt c√°ch khoa h·ªçc v·ªõi c√°c ch·∫ø ƒë·ªô h·ªçc t·∫≠p th√¥ng minh
          </p>
        </div>

        {/* Progress Overview (if user has progress) */}
        {hasProgress && !loadingProgress && (
          <div className="bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl p-6 text-white mb-8 shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <BarChart3 className="w-6 h-6 mr-3" />
                <h3 className="text-xl font-semibold">Ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa b·∫°n</h3>
              </div>
              <div className="flex items-center bg-white/20 rounded-full px-3 py-1">
                <Percent className="w-4 h-4 mr-1" />
                <span className="font-bold">{progressPercentage}%</span>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white/10 rounded-lg p-4 backdrop-blur-sm">
                <div className="text-2xl font-bold mb-1">{userProgress.examAttempts}</div>
                <div className="text-sm text-white/80">L·∫ßn ki·ªÉm tra ƒë√£ ho√†n th√†nh</div>
              </div>
              
              <div className="bg-white/10 rounded-lg p-4 backdrop-blur-sm">
                <div className="text-2xl font-bold mb-1">{userProgress.srs.total_cards}</div>
                <div className="text-sm text-white/80">Th·∫ª ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v√†o SRS</div>
              </div>
              
              <div className="bg-white/10 rounded-lg p-4 backdrop-blur-sm">
                <div className="text-2xl font-bold mb-1">{userProgress.srs.due_cards}</div>
                <div className="text-sm text-white/80">Th·∫ª c·∫ßn √¥n t·∫≠p h√¥m nay</div>
              </div>
            </div>
            
            {/* Progress bar */}
            <div className="mt-4">
              <div className="w-full bg-white/20 rounded-full h-2">
                <div 
                  className="bg-white h-2 rounded-full transition-all duration-300"
                  style={{ width: `${progressPercentage}%` }}
                ></div>
              </div>
            </div>
          </div>
        )}

        {/* Topic Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center">
                <BookOpen className="w-6 h-6 text-white" />
              </div>
              <span className="text-2xl font-bold text-gray-800">{totalFlashcards}</span>
            </div>
            <h3 className="font-semibold text-gray-800 mb-1">T·ªïng s·ªë th·∫ª h·ªçc</h3>
            <p className="text-sm text-gray-600">Flashcards ƒë·ªÉ b·∫°n h·ªçc t·∫≠p</p>
          </div>

          <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-r from-emerald-500 to-green-600 rounded-xl flex items-center justify-center">
                <Target className="w-6 h-6 text-white" />
              </div>
              <span className="text-2xl font-bold text-gray-800">{conceptCards}</span>
            </div>
            <h3 className="font-semibold text-gray-800 mb-1">Kh√°i ni·ªám l√Ω thuy·∫øt</h3>
            <p className="text-sm text-gray-600">C√¥ng th·ª©c v√† ƒë·ªãnh l√Ω quan tr·ªçng</p>
          </div>

          <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
                <Zap className="w-6 h-6 text-white" />
              </div>
              <span className="text-2xl font-bold text-gray-800">{practiceCards}</span>
            </div>
            <h3 className="font-semibold text-gray-800 mb-1">B√†i t·∫≠p th·ª±c h√†nh</h3>
            <p className="text-sm text-gray-600">C√¢u h·ªèi √°p d·ª•ng v√† r√®n luy·ªán</p>
          </div>
        </div>

        {/* Learning Outcomes */}
        <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100 mb-8">
          <div className="flex items-center mb-6">
            <div className="w-10 h-10 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-xl flex items-center justify-center mr-4">
              <Award className="w-5 h-5 text-white" />
            </div>
            <h2 className="text-2xl font-bold text-gray-800">K·∫øt qu·∫£ h·ªçc t·∫≠p mong ƒë·ª£i</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="flex items-start">
                <CheckCircle className="w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-gray-800 mb-1">N·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n</h3>
                  <p className="text-gray-600 text-sm">Hi·ªÉu r√µ c√°c kh√°i ni·ªám, c√¥ng th·ª©c v√† ƒë·ªãnh l√Ω quan tr·ªçng trong ch·ªß ƒë·ªÅ</p>
                </div>
              </div>
              
              <div className="flex items-start">
                <CheckCircle className="w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-gray-800 mb-1">√Åp d·ª•ng v√†o b√†i t·∫≠p</h3>
                  <p className="text-gray-600 text-sm">V·∫≠n d·ª•ng ki·∫øn th·ª©c ƒë·ªÉ gi·∫£i quy·∫øt c√°c d·∫°ng b√†i t·∫≠p kh√°c nhau</p>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="flex items-start">
                <CheckCircle className="w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-gray-800 mb-1">Ghi nh·ªõ l√¢u d√†i</h3>
                  <p className="text-gray-600 text-sm">S·ª≠ d·ª•ng h·ªá th·ªëng SRS ƒë·ªÉ duy tr√¨ ki·∫øn th·ª©c trong b·ªô nh·ªõ d√†i h·∫°n</p>
                </div>
              </div>
              
              <div className="flex items-start">
                <CheckCircle className="w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-gray-800 mb-1">T·ª± ƒë√°nh gi√° nƒÉng l·ª±c</h3>
                  <p className="text-gray-600 text-sm">Nh·∫≠n bi·∫øt ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu v√† c·∫£i thi·ªán ph∆∞∆°ng ph√°p h·ªçc t·∫≠p</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Learning Modes */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">
            üéì Ch·ªçn ph∆∞∆°ng th·ª©c h·ªçc
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
            {learningModes.map((mode, index) => (
              <div key={mode.id} className={`bg-gradient-to-br ${mode.bgColor} rounded-2xl p-6 border ${mode.borderColor} shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1`}>
                <div className="flex items-center mb-4">
                  <div className="w-10 h-10 bg-white/70 rounded-lg flex items-center justify-center mr-3 text-xl">
                    {mode.icon}
                  </div>
                  <div>
                    <h3 className="text-lg font-bold text-gray-800">{mode.title}</h3>
                    <p className={`text-xs font-medium ${mode.textColor}`}>{mode.description}</p>
                  </div>
                </div>
                
                <div className="space-y-2 mb-5">
                  {mode.features.map((feature, idx) => (
                    <div key={idx} className="flex items-start">
                      <CheckCircle className="w-3 h-3 text-green-500 mr-2 mt-1 flex-shrink-0" />
                      <span className="text-gray-700 text-xs leading-relaxed">{feature}</span>
                    </div>
                  ))}
                </div>
                
                <button 
                  onClick={() => onStartLearning(mode.id)}
                  className={`w-full py-2.5 px-4 ${mode.buttonColor} text-white rounded-lg font-semibold hover:shadow-lg transition-all duration-200 flex items-center justify-center group text-sm`}
                >
                  <Play className="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" />
                  B·∫Øt ƒë·∫ßu {mode.title}
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Study Tips */}
        <div className="bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl p-8 text-white mb-8">
          <div className="flex items-center mb-6">
            <Lightbulb className="w-8 h-8 mr-3" />
            <h2 className="text-2xl font-bold">M·∫πo h·ªçc t·∫≠p hi·ªáu qu·∫£</h2>
          </div>
          
          <div className="bg-white/10 rounded-xl p-6 backdrop-blur-sm">
            <div className="flex items-start">
              <div className="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center mr-4 flex-shrink-0">
                {studyTips[currentTip].icon}
              </div>
              <div className="flex-1">
                <h3 className="font-semibold text-lg mb-2">{studyTips[currentTip].title}</h3>
                <p className="text-white/90 leading-relaxed">{studyTips[currentTip].description}</p>
              </div>
            </div>
            
            {/* Tip indicators */}
            <div className="flex justify-center mt-6 space-x-2">
              {studyTips.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentTip(index)}
                  className={`w-2 h-2 rounded-full transition-all duration-300 ${
                    index === currentTip ? 'bg-white w-6' : 'bg-white/50'
                  }`}
                />
              ))}
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={() => onStartLearning('exam')}
            className="px-8 py-4 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all duration-200 flex items-center justify-center group"
          >
            <BookOpen className="w-5 h-5 mr-2 group-hover:scale-110 transition-transform" />
            {hasProgress ? 'Ti·∫øp t·ª•c v·ªõi Exam Mode' : 'B·∫Øt ƒë·∫ßu h·ªçc v·ªõi Exam Mode'}
            <ChevronRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform" />
          </button>
          
          <button
            onClick={onClose}
            className="px-8 py-4 bg-white text-gray-700 border-2 border-gray-200 rounded-xl font-semibold hover:bg-gray-50 hover:border-gray-300 transition-all duration-200"
          >
            Kh√°m ph√° sau
          </button>
        </div>
      </div>
    </div>
  );
};

export default TopicWelcome; 